# Review form for project XXX

**Name of project to be reviewed:**

path-tracer-4

**Names of reviewers:**

Oskari Okkonen
Oskar Keurulainen
Axel Järvinen
Rudolf Stråhlmann

Provide short comments (2-4 sentences) for each item below.

## 1. Overall design and functionality (0-6p)

  * 1.1: The implementation corresponds to the selected topic and
scope. The extent of project is large enough to accommodate work for
everyone (2p)

The implementation seems to be progressing in a timely fashion. If the development pace is kept, then it is likely that the final implementation will correspond well with the scope of the topic. From the git commits we can see that everyone has had to contribute to the project.
 
  * 1.2: The software structure is appropriate, clear and well
documented. e.g. class structure is justified, inheritance used where
appropriate, information hiding is implemented as appropriate. (2p)

The UML-diagram gives a good general picture of the software structure. The class structure and inheritances seem to be appropriate for a path tracing program.

  * 1.3: Use of external libraries is justified and well documented. (2p)

The library choices are completely reasonable and well justified.

## 2. Working practices (0-6p)

  * 2.1: Git is used appropriately (e.g., commits are logical and
frequent enough, commit logs are descriptive). (2 p)

Very good use of git overall. Features, such as movable camera and antialiasing are implemented in their own feature braches and the master branch is kept stable. Commits are made with a good frequency. Most of the commits are short and descriptive, and it is possible to follow the development of the project to a reasonable extent from the commit logs. Some of the commits however (such as "almost") only serve as a source of confusion and should be avoided for better maintainability. 

  * 2.2: Work is distributed and organised well. Everyone contributes to
the project and has a relevant role that matches his/her skills. The
distribution of roles is described well enough. (2p)

There is not a clear distribution of roles instead of the project manager, but tasks are instead allocated for weekly sprint sessions. This is slightly different than the recommended practise but probably equally viable if everyone is ready to put the required effort. It seems from the commit logs that everyone is able to contribute to the project. There also seems to be a working task distribution strategy even though the tasks overlap to some extent. 

  * 2.3: Quality assurance is appropriate. Implementation is tested
comprehensively and those testing principles are well documented. (2p)

Modules are separately tested with gtest, which is very good for maintainability. Tests are included in their own directory and the README file has instructions on using them. Most of the tests seem to be broken and are commented away, but this might just be a temporary issue.

## 3. Implementation aspects (0-8p)

  * 3.1: Building the software is easy and well documented. CMake or
such tool is highly recommended. (2p)

Building the software is well documented in README.md file. CMake is used for compiling.

  * 3.2: Memory management is robust, well-organised and
coherent. E.g., smart pointers are used where appropriate or RO3/5 is
followed. The memory management practices should be documented. (2p)

Raw pointers are used instead of smart pointers a few times.

  * 3.3: C++ standard library is used where appropriate. For example,
containers are used instead of own solutions where it makes sense. (2
p)

Standard library is used appropriately.

  * 3.4: Implementation works robustly also in exceptional
situations. E.g., functions can survive invalid inputs and exception
handling is used where appropriate. (2p)

There isn't exception handling at all.

## 4. Project extensiveness (0-10p)

  * Project contains features beyond the minimal requirements: Most of
the projects list additional features which can be implemented for
more points. Teams can also suggest their own custom features, though
they have to be in the scope of the project and approved by the course
assistant who is overseeing the project. (0-10p)

The project currently focuses on the basic features, which is good at this stage. More advanced features are prioritized in the plan in a clear way. Most of the extensions listed in the plan, such as monte carlo integration and cpu parallellism are however very trivial to implement in this context, so there is potential for more features or optimizations based on the current state of the project.
